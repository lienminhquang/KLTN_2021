// <auto-generated />
using System;
using FoodOrder.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace FoodOrder.API.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20210318162332_Add Promotion amount for order")]
    partial class AddPromotionamountfororder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FoodOrderBackend.Models.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AppRole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9e08f48-883c-42dc-a700-da5cf1d81aa3"),
                            ConcurrencyStamp = "6b15a5eb-ad51-4d85-87c0-41b27a1615b0",
                            Description = "This is Admintrator role.",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("74d17d8b-3f91-4d3a-893f-09b4e51e3834"),
                            ConcurrencyStamp = "9ad0bb0b-0a99-401a-81c9-23f4ef5ef2b5",
                            Description = "This is User role.",
                            Name = "user",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("FoodOrderBackend.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4e253b2-756e-48b8-9c42-b5acb139bed4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc7e0537-717e-47bf-b82b-ae1d8e07508f",
                            DateOfBirth = new DateTime(1999, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jame@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mary",
                            LastName = "Jame",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAME@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIgkDxtaZplnDwTgeGNjeEw91zlBQpr8oRytX3P0yWm22CAKin58H9wCzr+oKeKolg==",
                            PhoneNumber = "+111111111",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("daeb6f0d-eefe-4250-9ecd-28b3243eb684"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7695217-bc3e-4c7b-97d7-b5f0e55cc24c",
                            DateOfBirth = new DateTime(1990, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "messi10@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Lonen",
                            LastName = "Messi",
                            LockoutEnabled = false,
                            NormalizedEmail = "MESSI10@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPDnKFoV4LOAOOnjAlYWPGzYELh7nHoKLn0h8U7lhJexD7wVz7l59ysMhJE91GvDXg==",
                            PhoneNumber = "+111111111",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "messi10"
                        });
                });

            modelBuilder.Entity("FoodOrderBackend.Models.Cart", b =>
                {
                    b.Property<int>("FoodID")
                        .HasColumnType("int");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("FoodID", "AppUserId");

                    b.HasIndex("AppUserId");

                    b.ToTable("Cart");

                    b.HasData(
                        new
                        {
                            FoodID = 1,
                            AppUserId = new Guid("daeb6f0d-eefe-4250-9ecd-28b3243eb684"),
                            Quantity = 1
                        },
                        new
                        {
                            FoodID = 2,
                            AppUserId = new Guid("daeb6f0d-eefe-4250-9ecd-28b3243eb684"),
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("FoodOrderBackend.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Com trua cac loai",
                            Name = "Com trua"
                        },
                        new
                        {
                            ID = 2,
                            Description = "Nuoc giai khat cac loai",
                            Name = "Nuoc giai khat"
                        },
                        new
                        {
                            ID = 3,
                            Description = "Mon an kem",
                            Name = "Cac mon an kem mon chinh"
                        });
                });

            modelBuilder.Entity("FoodOrderBackend.Models.Food", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("Food");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Count = 100,
                            Description = "Com tam lam tu by quyet gia truyen co 2 khong 1",
                            ImagePath = "default",
                            Name = "Com tam gia truyen",
                            Price = 15000m
                        },
                        new
                        {
                            ID = 2,
                            Count = 57,
                            Description = "Canh rong bien thit bam",
                            ImagePath = "default",
                            Name = "Canh rong bien",
                            Price = 10000m
                        },
                        new
                        {
                            ID = 3,
                            Count = 1000,
                            Description = "Nuoc giai khat pepsi",
                            ImagePath = "default",
                            Name = "Pepsi",
                            Price = 7000m
                        },
                        new
                        {
                            ID = 4,
                            Count = 200,
                            Description = "Tra da lam tu by quyet gia truyen co 2 khong 1",
                            ImagePath = "default",
                            Name = "Tra da",
                            Price = 5000m
                        });
                });

            modelBuilder.Entity("FoodOrderBackend.Models.FoodCategory", b =>
                {
                    b.Property<int>("FoodID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("FoodID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("FoodCategory");

                    b.HasData(
                        new
                        {
                            FoodID = 1,
                            CategoryID = 1
                        },
                        new
                        {
                            FoodID = 3,
                            CategoryID = 2
                        },
                        new
                        {
                            FoodID = 4,
                            CategoryID = 2
                        },
                        new
                        {
                            FoodID = 3,
                            CategoryID = 1
                        });
                });

            modelBuilder.Entity("FoodOrderBackend.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AppUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePaid")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<decimal?>("PromotionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PromotionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AppUserID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("PromotionID");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AppUserID = new Guid("daeb6f0d-eefe-4250-9ecd-28b3243eb684"),
                            CreatedDate = new DateTime(2021, 3, 18, 23, 23, 31, 739, DateTimeKind.Local).AddTicks(9133),
                            IsPaid = false,
                            OrderStatusID = 1,
                            PromotionID = 1
                        });
                });

            modelBuilder.Entity("FoodOrderBackend.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("FoodID")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID", "FoodID");

                    b.HasIndex("FoodID");

                    b.ToTable("OrderDetail");

                    b.HasData(
                        new
                        {
                            OrderID = 1,
                            FoodID = 1,
                            Amount = 1,
                            Price = 12000m
                        },
                        new
                        {
                            OrderID = 1,
                            FoodID = 3,
                            Amount = 2,
                            Price = 5000m
                        });
                });

            modelBuilder.Entity("FoodOrderBackend.Models.OrderStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "",
                            Name = "Dang tiep nhan"
                        },
                        new
                        {
                            ID = 2,
                            Description = "",
                            Name = "Dang chuan bi"
                        },
                        new
                        {
                            ID = 3,
                            Description = "",
                            Name = "Dang giao hang"
                        },
                        new
                        {
                            ID = 4,
                            Description = "",
                            Name = "Da nhan hang"
                        },
                        new
                        {
                            ID = 5,
                            Description = "",
                            Name = "Da huy"
                        });
                });

            modelBuilder.Entity("FoodOrderBackend.Models.Promotion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 3, 18, 23, 23, 31, 689, DateTimeKind.Local).AddTicks(8655));

                    b.Property<string>("Desciption")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 3, 18, 23, 23, 31, 691, DateTimeKind.Local).AddTicks(4694));

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<int>("MinPrice")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Percent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(10f);

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2021, 3, 18, 23, 23, 31, 691, DateTimeKind.Local).AddTicks(4246));

                    b.HasKey("ID");

                    b.ToTable("Promotion");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Amount = 100,
                            Code = "THANHVIENMOI",
                            CreatedDate = new DateTime(2021, 3, 18, 23, 23, 31, 740, DateTimeKind.Local).AddTicks(9248),
                            Enabled = true,
                            EndDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Max = 5000,
                            MinPrice = 50000,
                            Name = "Chao thanh vien moi",
                            Percent = 0.25f,
                            StartDate = new DateTime(2021, 3, 18, 23, 23, 31, 741, DateTimeKind.Local).AddTicks(2138)
                        });
                });

            modelBuilder.Entity("FoodOrderBackend.Models.Rating", b =>
                {
                    b.Property<Guid>("AppUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FoodID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastCreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Star")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.HasKey("AppUserID", "FoodID");

                    b.HasIndex("FoodID");

                    b.ToTable("Rating");

                    b.HasData(
                        new
                        {
                            AppUserID = new Guid("daeb6f0d-eefe-4250-9ecd-28b3243eb684"),
                            FoodID = 1,
                            Comment = "Good",
                            LastCreatedTime = new DateTime(2021, 3, 18, 23, 23, 31, 741, DateTimeKind.Local).AddTicks(4911),
                            Star = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserToken");
                });

            modelBuilder.Entity("FoodOrderBackend.Models.Cart", b =>
                {
                    b.HasOne("FoodOrderBackend.Models.AppUser", "AppUser")
                        .WithMany("Carts")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderBackend.Models.Food", "Food")
                        .WithMany("Carts")
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FoodOrderBackend.Models.FoodCategory", b =>
                {
                    b.HasOne("FoodOrderBackend.Models.Category", "Category")
                        .WithMany("FoodCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderBackend.Models.Food", "Food")
                        .WithMany("FoodCategories")
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FoodOrderBackend.Models.Order", b =>
                {
                    b.HasOne("FoodOrderBackend.Models.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderBackend.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderBackend.Models.Promotion", "Promotion")
                        .WithMany("Orders")
                        .HasForeignKey("PromotionID");

                    b.Navigation("AppUser");

                    b.Navigation("OrderStatus");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("FoodOrderBackend.Models.OrderDetail", b =>
                {
                    b.HasOne("FoodOrderBackend.Models.Food", "Food")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderBackend.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodOrderBackend.Models.Rating", b =>
                {
                    b.HasOne("FoodOrderBackend.Models.AppUser", "AppUser")
                        .WithMany("Ratings")
                        .HasForeignKey("AppUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderBackend.Models.Food", "Food")
                        .WithMany("Ratings")
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("FoodOrderBackend.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FoodOrderBackend.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FoodOrderBackend.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("FoodOrderBackend.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderBackend.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FoodOrderBackend.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodOrderBackend.Models.AppUser", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("FoodOrderBackend.Models.Category", b =>
                {
                    b.Navigation("FoodCategories");
                });

            modelBuilder.Entity("FoodOrderBackend.Models.Food", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("FoodCategories");

                    b.Navigation("OrderDetails");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("FoodOrderBackend.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("FoodOrderBackend.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodOrderBackend.Models.Promotion", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
